package com.telus.credit.dao;

import static com.telus.credit.dao.entity.CreditWarningHistoryEntity.Cols.credit_profile_id;
import static com.telus.credit.dao.entity.CreditWarningHistoryEntity.Cols.updated_on_ts;
import static com.telus.credit.dao.entity.CreditWarningHistoryEntity.Cols.version;
import static com.telus.credit.dao.entity.CreditWarningHistoryEntity.Cols.warning_id;
import static com.telus.credit.dao.entity.CreditWarningHistoryEntity.Cols.warning_legacy_id;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.UUID;

import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.telus.credit.dao.entity.CreditWarningHistoryEntity;
import com.telus.credit.dao.operation.CreditWarningHistoryOperation;
import com.telus.credit.dao.rowmapper.CreditWarningHistoryRowMapper;

@Repository
public class CreditWarningHistoryDao extends AbstractDao {

    public CreditWarningHistoryDao(DataSource dataSource) {
        super(dataSource);
    }

    /**
     * Insert entity
     *
     * @param entity
     * @return autogenerated primary key
     */
    public String insert(CreditWarningHistoryEntity entity) {
        KeyHolder keyHolder = CreditWarningHistoryOperation.insert(entity)
                .setParam("creditProfileId", UUID.fromString(entity.getCreditProfileId()))
                .execute(this);
        String key = keyHolder.getKeyList().get(0).get(warning_id.name()).toString();
        entity.setWarningId(key);
        return key;
    }

    /**
     * Get warning by uid
     *
     * @param uid UID string
     * @return
     */
    public Optional<CreditWarningHistoryEntity> getById(String uid) {
        if (StringUtils.isBlank(uid)) {
            return Optional.empty();
        }

        return queryForObject(new CreditWarningHistoryRowMapper(),
                CreditWarningHistoryOperation.selectAll(warning_id + "=?"), UUID.fromString(uid));
    }

    /**
     * Get warning by profile uid and legacy id
     *
     * @param profileId UID string
     * @param legacyId
     * @return
     */
    public Optional<CreditWarningHistoryEntity> getByProfileIdAndLegacyId(String profileId, long legacyId) {
        if (StringUtils.isBlank(profileId)) {
            return Optional.empty();
        }
        
       // return getJdbcTemplate().query(sql, new CreditWarningHistoryRowMapper(), profileUids.stream().map(UUID::fromString).toArray());
       Optional<List<CreditWarningHistoryEntity>> optionalList = query(new CreditWarningHistoryRowMapper(),
                CreditWarningHistoryOperation.selectAll(warning_legacy_id + "=? AND " + credit_profile_id + "=?"),
                legacyId, UUID.fromString(profileId));
        
       if(optionalList.isPresent() && optionalList.get()!=null && optionalList.get().size()>0) {
    	   return  Optional.of(optionalList.get().get(0));
       }
       
       return Optional.empty();
    }
    public Optional<CreditWarningHistoryEntity> getByProfileId_Del(String profileId) {
        if (StringUtils.isBlank(profileId)) {
            return Optional.empty();
        }
       Optional<List<CreditWarningHistoryEntity>> optionalList = query(new CreditWarningHistoryRowMapper(),
                CreditWarningHistoryOperation.selectAll( credit_profile_id + "=?"), UUID.fromString(profileId));
        
       if(optionalList.isPresent() && optionalList.get()!=null && optionalList.get().size()>0) {
    	   return  Optional.of(optionalList.get().get(0));
       }
       
       return Optional.empty();
    }
    
    public List<CreditWarningHistoryEntity> getWarningListByProfileIds(String profileId) {
    	if (StringUtils.isBlank(profileId)) {
            return Collections.emptyList();
        }

        String sql = CreditWarningHistoryOperation.SELECT_ALL_STATEMENT+ " WHERE " + credit_profile_id  + "=?" ;

        return getJdbcTemplate().query(sql, new CreditWarningHistoryRowMapper(), UUID.fromString(profileId));
    }
    
    /**
     * Update entity
     *
     * @param warningUuid UUID string
     * @param entity
     * @return number of rows updated
     */
    public int update(String warningUuid, CreditWarningHistoryEntity entity) {
        if (StringUtils.isBlank(warningUuid) || entity == null) {
            return 0;
        }
        DaoHelper.removeNullAttributes(entity.getUpdateMap());
        
        SimpleUpdate update = updateWithVersioning(entity.getUpdateMap(),
                UUID.fromString(warningUuid), warning_id.name(), version.name());
        return update != null ? update.set(updated_on_ts.name(), NOW).execute(CreditWarningHistoryOperation.UPDATE_PREFIX, this) : 0;
    }

    /**
     * Get credit warnings by credit profile uids
     *
     * @param profileUids List of credit profile UID strings
     * @return
     */
    public List<CreditWarningHistoryEntity> getByProfileIds(Collection<String> profileUids) {
        if (profileUids == null || profileUids.isEmpty()) {
            return Collections.emptyList();
        }

        StringJoiner inJoiner = new StringJoiner(",", "(", ")");
        profileUids.forEach(uid -> inJoiner.add("?"));
        String sql = CreditWarningHistoryOperation.SELECT_ALL_STATEMENT
                + " WHERE " + credit_profile_id + " IN " + inJoiner.toString();

        return getJdbcTemplate().query(sql, new CreditWarningHistoryRowMapper(), profileUids.stream().map(UUID::fromString).toArray());
    }

    /**
     * Remove all warnings based on credit profile uids
     *
     * @param profileUids List of credit profile UID strings
     * @return
     */
    public int deleteByProfileIds(Collection<String> profileUids) {
        if (profileUids == null || profileUids.isEmpty()) {
            return 0;
        }

        StringJoiner inJoiner = new StringJoiner(",", "(", ")");
        profileUids.forEach(uid -> inJoiner.add("?"));
        String sql = "DELETE from credit_warning_history"
                + " WHERE " + credit_profile_id + " IN " + inJoiner.toString();

        return getJdbcTemplate().update(sql, profileUids.stream().map(UUID::fromString).toArray());
    }
    
    public int deleteByProfileId(String profileUid) {
        if (profileUid == null || profileUid.isEmpty()) {
            return 0;
        }

        String sql = "DELETE from credit_warning_history " +  " WHERE " + credit_profile_id  + "=?" ;

        return getJdbcTemplate().update(sql, UUID.fromString(profileUid));
    }
 
    
}
